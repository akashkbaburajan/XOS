alias physicalSP S0;
physicalSP = ( [PTBR + (SP/512)*2] * 512) + (SP%512);

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

alias PID S9;
PID = (PTBR - 1024) / 8;

if(sysCallNo == 8) then		//fork

	alias newPID S2;
	newPID = 0;			
	while(newPID < 32) do		//finding free PCB
		if( [READY_LIST + newPID*32 + 1] == 0)	then
			break;
		endif;
		newPID = newPID + 1;
	endwhile;

	if(newPID == 32) then
		[physicalSP - 2] = -1;
		ireturn;
	endif;
		
	[READY_LIST + newPID*32] = newPID;	//setting PID of child;

	alias p_pg_count S3;
	p_pg_count = 0;
	alias counter S4;
	counter = 0;

	while(counter < 4) do 	//count of pages of parent
	    if([PTBR+counter*2+1]=="01"||[PTBR+counter*2+1]=="11") then
			p_pg_count = p_pg_count + 1;
		endif;
		counter = counter + 1;
	endwhile;

	alias free_pg_count S5;
	free_pg_count = 0;
	counter = 0;
	while(counter < 64) do	//counting free mem pgs
		if([MEM_LIST + counter] == 0) then
			free_pg_count = free_pg_count + 1;
		endif;
		if(free_pg_count == p_pg_count) then
			break;			
		endif;
		counter = counter + 1;
	endwhile;
	
	if(free_pg_count < p_pg_count) then	//not tnough mem
		[physicalSP - 2] = -1;
		ireturn;
	endif;

	alias freePageIndex S5;
	freePageIndex = 0;
	alias word S6;
	alias childPTBR S7;
	childPTBR = 1024 + newPID*8;
	counter = 0;

	while(counter < 4) do
	
		//mem hasnt been allocated so continue
		if([PTBR + counter*2 + 1] == "00") then
			[childPTBR + counter*2 + 1] = "00";
			counter = counter + 1;
			continue;
		endif;

		//find free page
		while(freePageIndex < 64) do 		
			if([MEM_LIST + freePageIndex] == 0) then
				break;
			endif;
			freePageIndex = freePageIndex + 1;
		endwhile;
		
		[MEM_LIST + freePageIndex] = 1;

		//start copy of page
		word = 0;
		while(word < 512) do
			
			[freePageIndex*512 + word] = [[PTBR + counter*2] * 512 + word];
			word = word + 1;
		endwhile;

		[childPTBR + counter*2] = freePageIndex; 
		[childPTBR + counter*2 + 1] = [PTBR + counter*2 + 1];

		counter = counter + 1;

	endwhile;

	[READY_LIST + newPID*32 + 4] = [physicalSP];	//IP
	[READY_LIST + newPID*32 + 3] = SP - 1;		//SP
	[READY_LIST + newPID*32 + 2] = BP;		//BP
	[READY_LIST + newPID*32 + 5] = childPTBR;	//PTBR
	[READY_LIST + newPID*32 + 6] = PTLR;		//PTLR
	[READY_LIST + newPID*32 + 7] = R0;
	[READY_LIST + newPID*32 + 8] = R1;
	[READY_LIST + newPID*32 + 9] = R2;
	[READY_LIST + newPID*32 + 10] = R3;
	[READY_LIST + newPID*32 + 11] = R4;
	[READY_LIST + newPID*32 + 12] = R5;
	[READY_LIST + newPID*32 + 13] = R6;
	[READY_LIST + newPID*32 + 14] = R7;
	[READY_LIST + newPID*32 + 31] = PID;		//parent PID

	counter = 0;
	while(counter < 8) do
		[READY_LIST + newPID*32 + 15 + counter*2] = [READY_LIST + PID*32 + 15 + counter*2];	// SWOFT
		[READY_LIST + newPID*32 + 15 + counter*2 + 1] = [READY_LIST + PID*32 + 15 + counter*2 + 1];	// LSEEK 
		[FILE_TABLE + [READY_LIST + PID * 32 + 15 + counter * 2] * 2 + 1] = [FILE_TABLE + [READY_LIST + PID * 32 + 15 + counter * 2] * 2 + 1] + 1;			//inc file open count in SWOFT
		counter = counter + 1;
	endwhile;
		
	[READY_LIST + newPID * 32 + 1] = 1;	//child ready
	
	[physicalSP - 2] = newPID;

	alias childPhysicalSP S8;
	childPhysicalSP = ([childPTBR + 2 * ((SP - 1) / 512)] * 512) + ((SP - 1) % 512);
	[childPhysicalSP - 1] = -2;
	
	ireturn;
	
endif;



















